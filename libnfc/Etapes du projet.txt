The first aspect of the project we chose to work on was the HTTP POST request as it only depended on software. While looking for a simple way to send HTTP requests with C code we found libcurl and decided to use it for its simplicity. We then created a training class to practice and used the Requestbin website to test the requests.
The next step was to use an XML parser in order to read the response from the server. We chose to use ezxml which seemed to be the easiest way to parse an XML file with C code. We trained with this library like with libcurl then moved on to the next step.
LibNFC, the library Adafruit developped to use the NFC shield was obviously on the list of the technologies we had to master. Using the documentation and source code of the library we managed to extract from the shield the relevant information for what we needed and tested it in a training class.
Then we had to begin to assemble the codes, first we linked the action of reading a card ID with the NFC shield and sending a request to the server. At this moment of the project the server was not available so we continued to work using Requestbin.
We also found out that the server was not sending XML replies but JSON replies, so we tried to modify the server to send XML answers but it was not possible.
Our solution was then to modify our previous work to parse JSON instead of XML.
But when we managed to do it we realized that the LEDs were not working, we then dismanteled the breadboard installation provided and assembled it in the right way.
Once the LEDs were properly working we decided to include them in the program using the GPIO API to light them from the C program. The idea was to use them to provide feedback to the user, once a card was read and the request sent to the server the red LED would light on, if a positive answer was to come the red light would be set of and the green one would light on for a few seconds. We also used the LEDs to show different codes to signal the different possible failures of the system.
Our next goal was then to launch the program on startup and to loop it as long as the device would be on. We did it using shell scipts that we integrated to the boot directories of the operating system of the Pi.
Then we assembled the whole circuit and soldered it without using the breadboard. This allowed us to take the measurments we needed to begin the design of the box.
To design the box we chose FreeCAD, a simple 3D design software and created the box and its lid using the measurments we made during the previous step.
Finally we printed the box and even if there were a lot of design problems with it we chose to adapt it without printing another one to avoid a waste of resources.
